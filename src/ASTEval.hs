module ASTEval
  (
  )
where

import AST (Node (..))
import Bytecode (Bytecode, Instruction (..))

eval :: Node -> Bytecode
eval (IntegerValue nb) = [Test]
eval (FloatValue nb) = [Test]
eval (ArrayValue nodes) = [Test]
eval (VariableInitialization dest type_ value) = [Test]
eval (Assignment dest value) = [Test]
eval (Block nodes) = [Test]
eval (Return node) = [Test]
eval (If condition then_ else_) = [Test]
eval (While condition body) = [Test]
eval (For init condition inc body) = [Test]
eval (FunctionDeclaration type_ name args body) = [Test]
eval (FunctionCall name args) = [Test]
eval (EnumDeclaration name elements) = [Test]
eval (StructDeclaration name elements) = [Test]
eval (StructInitialization name elements) = [Test]
eval (EnumElement name value) = [Test]
eval (StructElement name value) = [Test]
eval (CastToType type_ value) = [Test]
eval (CastToIdentifier type_ value) = [Test]
eval (LessThanOperator left right) = [Test]
eval (GreaterThanOperator left right) = [Test]
eval (LessThanOrEqualOperator left right) = [Test]
eval (GreaterThanOrEqualOperator left right) = [Test]
eval (EqualOperator left right) = [Test]
eval (NotEqualOperator left right) = [Test]
eval (AndOperator left right) = [Test]
eval (OrOperator left right) = [Test]
eval (NotOperator value) = [Test]
eval (PlusOperator left right) = [Test]
eval (PlusEqualOperator left right) = [Test]
eval (MinusOperator left right) = [Test]
eval (MinusEqualOperator left right) = [Test]
eval (MultiplyOperator left right) = [Test]
eval (MultiplyEqualOperator left right) = [Test]
eval (DivideOperator left right) = [Test]
eval (DivideEqualOperator left right) = [Test]
eval (ModuloOperator left right) = [Test]
eval (SizeofOfExpressionOperator expr) = [Test]
eval (SizeofOfTypeOperator type_) = [Test]
eval (ReferenceOperator value) = [Test]
eval (DereferenceOperator value) = [Test]
eval (ArrayAccess array index) = [Test]
eval (Syscall args) = [Test]
eval (Identifier name) = [Test]
