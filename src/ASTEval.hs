module ASTEval (

)
where

import AST (Node (..))
import Bytecode (Bytecode, Instruction (..))

eval :: Node -> Bytecode
eval (IntV nb) = [Test]
eval (FloatV nb) = [Test]
eval (ArrayV nodes) = [Test]
eval (VarDef dest type_ value) = [Test]
eval (VarAssign dest value) = [Test]
eval (Block nodes) = [Test]
eval (Return node) = [Test]
eval (If condition then_ else_) = [Test]
eval (While condition body) = [Test]
eval (For init condition inc body) = [Test]
eval (FunctionDeclaration type_ name args body) = [Test]
eval (FunctionCall name args) = [Test]
eval (EnumDeclaration name elements) = [Test]
eval (StructDeclaration name elements) = [Test]
eval (StructInitialization name elements) = [Test]
eval (EnumElement name value) = [Test]
eval (StructElement name value) = [Test]
eval (CastToType type_ value) = [Test]
eval (CastToIdentifier type_ value) = [Test]
eval (LtOp left right) = [Test]
eval (GtOp left right) = [Test]
eval (LeqOp left right) = [Test]
eval (GeqOp left right) = [Test]
eval (EqOp left right) = [Test]
eval (NeqOp left right) = [Test]
eval (AndOp left right) = [Test]
eval (OrOp left right) = [Test]
eval (NotOp value) = [Test]
eval (AddOp left right) = [Test]
eval (AddEqOp left right) = [Test]
eval (SubOp left right) = [Test]
eval (SubEqOp left right) = [Test]
eval (MulOp left right) = [Test]
eval (MulEqOp left right) = [Test]
eval (DivOp left right) = [Test]
eval (DivEqOp left right) = [Test]
eval (ModOp left right) = [Test]
eval (SizeofExpr expr) = [Test]
eval (SizeofType type_) = [Test]
eval (Reference value) = [Test]
eval (Dereference value) = [Test]
eval (ArrayAccess array index) = [Test]
eval (Syscall args) = [Test]
eval (Identifier name) = [Test]
